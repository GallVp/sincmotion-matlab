%% Setup

clear
close all
clc

%% Constants
TEST_TOL                        = 1e-10;
FS                              = 100;
IS_ANDROID                      = 0;                % ANDROID=1, else IOS
SKIP_AT_RANDOM                  = 1;
SKIP_PERCENTAGE                 = 80;
rng shuffle

%% Validation data and outcomes
%
% The validation outcomes were originally produced
% on Mon Aug 23 12:21:20 2021 +0500 and published here:
%
% Rashid, U.; Barbado, D.; Olsen, S.; Alder, G.; Elvira, J.L.L.;
% Lord, S.; Niazi, I.K.; Taylor, D. Validity and Reliability of a
% Smartphone App for Gait and Balance Assessment. Sensors 2022, 22,
% 124. https://doi.org/10.3390/s22010124
%
% The raw data and the outcomes are not checked into version control due to
% lask of permission from the Ethics Committee.

DATA_ROOT                       = fullfile('validation_data', 'ios_savs');
APP_DATA                        = fullfile(DATA_ROOT,...
                                    'app_data');
PARTICIPANT_CHARACTERISTICS     = fullfile(DATA_ROOT,...
                                    'data_tables',...
                                    'PartCharacteristics.csv');
GAIT_OUTCOMES                   = fullfile(DATA_ROOT,...
                                    'data_tables',...
                                    'ComfortableGaitOutcomes_58c4761.csv');
STATIC_OUTCOMES                 = fullfile(DATA_ROOT,...
                                    'data_tables',...
                                    'StaticBalanceOutcomes_58c4761.csv');

%% Validate static task outcomes
staticOutcomesTable             = readtable(STATIC_OUTCOMES,...
                                    'VariableNamingRule', 'preserve');

for i=1:height(staticOutcomesTable)
    caseOutcomes = staticOutcomesTable(i, :);

    fprintf('Processing %-10s %-2s for Part %-2d Test %-2d\n',...
        caseOutcomes.Task{:}, caseOutcomes.Qual{:},...
        caseOutcomes.Part, caseOutcomes.Test);

    if SKIP_AT_RANDOM && binornd(1, SKIP_PERCENTAGE/100)
        disp('....................................Skipped');
        continue
    end

    dataFilePath                = sprintf(...
                                    'S%0.2d Test set %d on %d %s %d %s %s.csv',...
                                    caseOutcomes.Part,...
                                    caseOutcomes.Test,...
                                    caseOutcomes.Day,...
                                    caseOutcomes.Month{:},...
                                    caseOutcomes.Year,...
                                    caseOutcomes.Task{:}, ...
                                    caseOutcomes.Qual{:});

    [accelData,...
    rotData,...
    timeVect,...
    gyroData]                   = loadGnBExportedFile(FS,...
                                    fullfile(APP_DATA, dataFilePath));

    expectedOutcomes            = -log([caseOutcomes.("MAA R"),...
                                    caseOutcomes.("ROM ML"),...
                                    caseOutcomes.("MAA AP")]);
    computedOutcomes            = estimateGnBStaticOutcomes(accelData,...
                                    rotData, FS, IS_ANDROID);

    condition                   = all(...
                                    (expectedOutcomes - computedOutcomes)...
                                    < TEST_TOL);

    if condition
        disp('.....................................Passed');
    else
        expectedOutcomes
        computedOutcomes
        error('.....................................Failed');
    end
end

%% Validate gait outcomes
gaitOutcomesTable               = readtable(GAIT_OUTCOMES,...
                                    'VariableNamingRule', 'preserve');
participantTable                = readtable(PARTICIPANT_CHARACTERISTICS,...
                                    'VariableNamingRule', 'preserve');

for i=1:height(gaitOutcomesTable)
    caseOutcomes = gaitOutcomesTable(i, :);

    fprintf('Processing %-10s %-2s for Part %-2d Test %-2d\n',...
        caseOutcomes.Task{:}, caseOutcomes.Qual{:},...
        caseOutcomes.Part, caseOutcomes.Test);

    if SKIP_AT_RANDOM && binornd(1, SKIP_PERCENTAGE/100)
        disp('....................................Skipped');
        continue
    end

    dataFilePath                = sprintf(...
                                    'S%0.2d Test set %d on %d %s %d %s %s.csv',...
                                    caseOutcomes.Part,...
                                    caseOutcomes.Test,...
                                    caseOutcomes.Day,...
                                    caseOutcomes.Month{:},...
                                    caseOutcomes.Year,...
                                    caseOutcomes.Task{:}, ...
                                    caseOutcomes.Qual{:});

    [accelData,...
    rotData,...
    timeVect,...
    gyroData]                   = loadGnBExportedFile(FS,...
                                    fullfile(APP_DATA, dataFilePath));

    personHeight                = table2array(participantTable(...
                                    participantTable.Part == caseOutcomes.Part,...
                                    'Height')) / 100;

    computedOutcomes            = estimateGnBGaitOutcomes(timeVect,...
                                    accelData,...
                                    rotData,...
                                    gyroData,...
                                    FS,...
                                    personHeight,...
                                    IS_ANDROID, 0);
    comparableComputedOutcomes  = [...
                                    computedOutcomes(1),...
                                    computedOutcomes(2),...
                                    computedOutcomes(5),...
                                    computedOutcomes(8),...
                                    computedOutcomes(9),...
                                    computedOutcomes(10),...
                                    computedOutcomes(11),...
                                    computedOutcomes(12)];
    expectedOutcomes            = [...
                                    caseOutcomes.("Gait symmetry"),...
                                    caseOutcomes.("Step length"),...
                                    caseOutcomes.("Step time"),...
                                    caseOutcomes.("Step length var"),...
                                    caseOutcomes.("Step time var"),...
                                    caseOutcomes.("Step length asym"),...
                                    caseOutcomes.("Step time asym"),...
                                    caseOutcomes.("Step velocity")];

    condition                   = all(...
                                    (...
                                    expectedOutcomes...
                                    - comparableComputedOutcomes)...
                                    < TEST_TOL);

    if condition
        disp('.....................................Passed');
    else
        expectedOutcomes
        comparableComputedOutcomes
        error('.....................................Failed');
    end
end
